# comparing_nets_plots.py
'''
Make some plots to compare string chemistry networks to the E. coli and yeast
metabolic networks using the data generated by comparing_nets_data.py
'''

import pandas as pd
from matplotlib import pyplot as plt
from matplotlib.gridspec import GridSpec
import sys

def plot_scn(axes, data, x_col):
    '''
    Plot the mean frequencies of either degrees or fluxes on a log-log
    scatterplot with errorbars on the points representing the standard 
    deviations of those frequencies
    '''
    axes.scatter(
        data = data, 
        x = x_col, 
        y = 'mean_freq', 
        c = 'blue',
        label = 'String Chemistries'
    )
    axes.errorbar(
        data = data,
        x = x_col,
        y = 'mean_freq',
        yerr = 'std_freq',
        linestyle = 'None',
        c = 'blue',
        label = ''
    )
    return(axes)

def plot_dist(axes, data, x_col, color, label):
    '''
    Plot a distribution of either degrees or fluxes on a log-log scatterplot
    '''
    axes.scatter(
        data = data, 
        x = x_col, 
        y = 'freq', 
        c = color, 
        label = label
    )
    return(axes)

def fix_axes(axes, x_lab, y_lab, panel):
    '''
    Make a set of axes log-scaled with appropriate labels
    '''
    axes.set_xlabel(x_lab)
    axes.set_ylabel(f'Frequency of {y_lab} With {x_lab}')
    axes.set_xscale('log')
    axes.set_yscale('log')
    axes.text(
        # position the letter above the plot on the left side
        -0.11, 1.1, panel, va = 'top', ha = 'right',
        # no idea what this does; got it from StackOverflow
        transform = axes.transAxes,
        # make the letter large and bold
        fontsize = 14, fontweight = 'bold' 
    )
    # make a legend so it's clear which colors represent which thing
    axes.legend()
    return(axes)

# read in files produced by comparing_nets_data.py
scn_deg_dists = pd.read_csv('data/scn_deg_dists.csv')
scn_flux_dists = pd.read_csv('data/scn_flux_dists.csv')
scn_sw_data = pd.read_csv('data/scn_sw_things.csv')
ecoli_deg_dist = pd.read_csv('data/ecoli_deg_dist.csv')
ecoli_flux_dist = pd.read_csv('data/ecoli_flux_dist.csv')
ecoli_sw_data = pd.read_csv('data/ecoli_sw_things.csv')
yeast_deg_dist = pd.read_csv('data/yeast_deg_dist.csv')
yeast_flux_dist = pd.read_csv('data/yeast_flux_dist.csv')
yeast_sw_data = pd.read_csv('data/yeast_sw_things.csv')

# combine the E. coli and yeast small-world dataframes and add a new column to
# label which row is which
ecoli_sw_data['org'] = 'E. coli'
yeast_sw_data['org'] = 'S. cerevisiae'
real_sw_data = pd.concat([ecoli_sw_data, yeast_sw_data])

# make a 2 by 2 grid with the degree and flux distributions in the first row
# and the plots of connectivities and shortest path lengths in the second
fig = plt.figure(figsize = (9,8))
gs = GridSpec(2,2, figure = fig)
deg_ax = fig.add_subplot(gs[0,0])
flux_ax = fig.add_subplot(gs[0,1])
C_ax = fig.add_subplot(gs[1,0])
L_ax = fig.add_subplot(gs[1,1])

# give each degree distribution a different color since they're all going on
# the same axes
deg_ax = plot_scn(deg_ax, scn_deg_dists, 'degree')
deg_ax = plot_dist(deg_ax, ecoli_deg_dist, 'degree', 'red', 'E. coli')
deg_ax = plot_dist(
    deg_ax, yeast_deg_dist, 'degree', 'green', 'S. cerevisiae'
)
deg_ax = fix_axes(deg_ax, 'Degree', 'Metabolites', 'a')

# now do the same thing with the flux distributions
flux_ax = plot_scn(flux_ax, scn_flux_dists, 'flux')
flux_ax = plot_dist(flux_ax, ecoli_flux_dist, 'flux', 'red', 'E. coli')
flux_ax = plot_dist(flux_ax, yeast_flux_dist, 'flux', 'green', 'S. cerevisiae')
flux_ax = fix_axes(flux_ax, 'Flux', 'Reactions', 'b')

# make a scatterplot to look at the metrics of network small-worldness
C_ax.scatter(
    data = real_sw_data,
    x = 'org',
    y = 'ref_C',
    label = 'Actual'
)
C_ax.scatter(
    data = real_sw_data,
    x = 'org',
    y = 'rand_C',
    label = 'Randomized'
)
C_ax.scatter(
    data = real_sw_data,
    x = 'org',
    y = 'lat_C',
    label = 'Lattice'
)
C_ax.legend()

L_ax.scatter(
    data = real_sw_data,
    x = 'org',
    y = 'ref_L',
    label = 'Actual'
)
L_ax.scatter(
    data = real_sw_data,
    x = 'org',
    y = 'rand_L',
    label = 'Randomized'
)
L_ax.scatter(
    data = real_sw_data,
    x = 'org',
    y = 'lat_L',
    label = 'Lattice'
)
L_ax.legend()

# make sure subplots don't overlap with each other
plt.tight_layout()
#plt.savefig('data/deg_flux_dists.png', dpi = 600)
plt.show()
